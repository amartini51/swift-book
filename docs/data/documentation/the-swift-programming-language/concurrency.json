{
  "abstract" : [
    {
      "text" : "Perform asynchronous operations.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"
  },
  "kind" : "article",
  "metadata" : {
    "role" : "article",
    "title" : "Concurrency"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Swift has built-in support for writing asynchronous and parallel code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a structured way.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Asynchronous code",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " can be suspended and resumed later,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "although only one piece of the program executes at a time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Suspending and resuming code in your program",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lets it continue to make progress",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "on short-term operations like updating its UI",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while continuing to work on long-running operations",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like fetching data over the network or parsing files.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Parallel code",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " means multiple pieces of code run simultaneously —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, a computer with a four-core processor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can run four pieces of code at the same time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with each core carrying out one of the tasks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A program that uses parallel and asynchronous code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "carries out multiple operations at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it suspends operations that are waiting for an external system.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The rest of this chapter uses the term ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "concurrency",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to refer to this common combination of asynchronous and parallel code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The additional scheduling flexibility from parallel or asynchronous code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also comes with a cost of increased complexity.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you write concurrent code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you don’t know ahead of time what code will run at the same time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you might not always know the order that code will run.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A common problem in concurrent code happens",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when multiple pieces of code try to access",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "some piece of shared mutable state —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this is known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "data race",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you use the language-level support for concurrency,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift detects and prevents data races,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and most data races produce a compile-time error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some data races can’t be detected until your code is running;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "these data races terminate code execution.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you’ve written concurrent code before,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you might be used to working with threads.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The concurrency model in Swift is built on top of threads,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but you don’t interact with them directly.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "An asynchronous function in Swift",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "can give up the thread that it’s running on,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "which lets another asynchronous function run on that thread",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "while the first function is blocked.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "When an asynchronous function resumes,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift doesn’t make any guarantee about which thread",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "that function will run on.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Although it’s possible to write concurrent code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without using Swift’s language support,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that code tends to be harder to read.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, the following code downloads a list of photo names,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "downloads the first photo in that list,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and shows that photo to the user:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "listPhotos(inGallery: \"Summer Vacation\") { photoNames in",
            "    let sortedNames = photoNames.sorted()",
            "    let name = sortedNames[0]",
            "    downloadPhoto(named: name) { photo in",
            "        show(photo)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Even in this simple case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the code has to be written as a series of completion handlers,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you end up writing nested closures.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this style,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "more complex code with deep nesting can quickly become unwieldy.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Defining-and-Calling-Asynchronous-Functions",
          "level" : 2,
          "text" : "Defining and Calling Asynchronous Functions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "asynchronous function",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "asynchronous method",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is a special kind of function or method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that can be suspended while it’s partway through execution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is in contrast to ordinary, synchronous functions and methods,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which either run to completion, throw an error, or never return.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An asynchronous function or method still does one of those three things,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it can also pause in the middle when it’s waiting for something.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside the body of an asynchronous function or method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you mark each of these places where execution can be suspended.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To indicate that a function or method is asynchronous,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write the ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword in its declaration after its parameters,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "similar to how you use ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " to mark a throwing function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the function or method returns a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " before the return arrow (",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s how you might fetch the names of photos in a gallery:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func listPhotos(inGallery name: String) async -> [String] {",
            "    let result = \/\/ ... some asynchronous networking code ...",
            "    return result",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For a function or method that’s both asynchronous and throwing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " before ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When calling an asynchronous method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "execution suspends until that method returns.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " in front of the call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to mark the possible suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is like writing ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " when calling a throwing function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to mark the possible change to the program’s flow if there’s an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside an asynchronous method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the flow of execution is suspended",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "only",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " when you call another asynchronous method —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "suspension is never implicit or preemptive —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which means every possible suspension point is marked with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Marking all of the possible suspension points in your code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "helps make concurrent code easier to read and understand.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code below fetches the names of all the pictures in a gallery",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then shows the first picture:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let photoNames = await listPhotos(inGallery: \"Summer Vacation\")",
            "let sortedNames = photoNames.sorted()",
            "let name = sortedNames[0]",
            "let photo = await downloadPhoto(named: name)",
            "show(photo)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because the ",
              "type" : "text"
            },
            {
              "code" : "listPhotos(inGallery:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both need to make network requests,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "they could take a relatively long time to complete.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Making them both asynchronous by writing ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " before the return arrow",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lets the rest of the app’s code keep running",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while this code waits for the picture to be ready.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To understand the concurrent nature of the example above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s one possible order of execution:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The code starts running from the first line",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and runs up to the first ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It calls the ",
                      "type" : "text"
                    },
                    {
                      "code" : "listPhotos(inGallery:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " function",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and suspends execution while it waits for that function to return.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "While this code’s execution is suspended,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "some other concurrent code in the same program runs.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "For example, maybe a long-running background task",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "continues updating a list of new photo galleries.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "That code also runs until the next suspension point, marked by ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "or until it completes.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "After ",
                      "type" : "text"
                    },
                    {
                      "code" : "listPhotos(inGallery:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " returns,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "this code continues execution starting at that point.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It assigns the value that was returned to ",
                      "type" : "text"
                    },
                    {
                      "code" : "photoNames",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The lines that define ",
                      "type" : "text"
                    },
                    {
                      "code" : "sortedNames",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "name",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "are regular, synchronous code.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Because nothing is marked ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " on these lines,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "there aren’t any possible suspension points.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The next ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " marks the call to the ",
                      "type" : "text"
                    },
                    {
                      "code" : "downloadPhoto(named:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " function.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This code pauses execution again until that function returns,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "giving other concurrent code an opportunity to run.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "After ",
                      "type" : "text"
                    },
                    {
                      "code" : "downloadPhoto(named:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " returns,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "its return value is assigned to ",
                      "type" : "text"
                    },
                    {
                      "code" : "photo",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and then passed as an argument when calling ",
                      "type" : "text"
                    },
                    {
                      "code" : "show(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The possible suspension points in your code marked with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicate that the current piece of code might pause execution",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while waiting for the asynchronous function or method to return.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is also called ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "yielding the thread",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because, behind the scenes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift suspends the execution of your code on the current thread",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and runs some other code on that thread instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because code with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " needs to be able to suspend execution,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only certain places in your program can call asynchronous functions or methods:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Code in the body of an asynchronous function, method, or property.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Code in the static ",
                      "type" : "text"
                    },
                    {
                      "code" : "main()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method of",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "a structure, class, or enumeration that’s marked with ",
                      "type" : "text"
                    },
                    {
                      "code" : "@main",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Code in an unstructured child task,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "as shown in ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : " below.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can explicitly insert a suspension point",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by calling the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func generateSlideshow(forGallery gallery: String) async {",
            "    let photos = await listPhotos(inGallery: gallery)",
            "    for photo in photos {",
            "        \/\/ ... render a few seconds of video for this photo ...",
            "        await Task.yield()",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Assuming the code that renders video is synchronous,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it doesn’t contain any suspension points.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The work to render video could also take a long time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can periodically call ",
              "type" : "text"
            },
            {
              "code" : "Task.yield()",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to explicitly add suspension points.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Structuring long-running code this way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lets Swift balance between making progress on this task,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and letting other tasks in your program make progress on their work.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is useful when writing simple code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to learn how concurrency works.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This method suspends the current task for at least the given amount of time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a version of the ",
              "type" : "text"
            },
            {
              "code" : "listPhotos(inGallery:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that uses ",
              "type" : "text"
            },
            {
              "code" : "sleep(for:tolerance:clock:)",
              "type" : "codeVoice"
            },
            {
              "text" : " to simulate waiting for a network operation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func listPhotos(inGallery name: String) async throws -> [String] {",
            "    try await Task.sleep(for: .seconds(2))",
            "    return [\"IMG001\", \"IMG99\", \"IMG0404\"]",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The version of ",
              "type" : "text"
            },
            {
              "code" : "listPhotos(inGallery:)",
              "type" : "codeVoice"
            },
            {
              "text" : " in the code above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is both asynchronous and throwing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the call to ",
              "type" : "text"
            },
            {
              "code" : "Task.sleep(until:tolerance:clock:)",
              "type" : "codeVoice"
            },
            {
              "text" : " can throw an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you call this version of ",
              "type" : "text"
            },
            {
              "code" : "listPhotos(inGallery:)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write both ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let photos = try await listPhotos(inGallery: \"A Rainy Weekend\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Asynchronous functions have some similarities to throwing functions:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you define an asynchronous or throwing function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you mark it with ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and you mark calls to that function with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "An asynchronous function can call another asynchronous function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like a throwing function can call another throwing function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "However, there’s a very important difference.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can wrap throwing code in a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " block to handle errors,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or use ",
              "type" : "text"
            },
            {
              "code" : "Result",
              "type" : "codeVoice"
            },
            {
              "text" : " to store the error for code elsewhere to handle it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "These approaches let you call throwing functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from nonthrowing code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func availableRainyWeekendPhotos() -> Result<[String], Error> {",
            "    return Result {",
            "        try listDownloadedPhotos(inGallery: \"A Rainy Weekend\")",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s no safe way to wrap asynchronous code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can call it from synchronous code and wait for the result.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Swift standard library intentionally omits this unsafe functionality —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "trying to implement it yourself can lead to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "problems like subtle races, threading issues, and deadlocks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When adding concurrent code to an existing project,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "work from the top down.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Specifically,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "start by converting the top-most layer of code to use concurrency,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then start converting the functions and methods that it calls,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "working through the project’s architecture one layer at a time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There’s no way to take a bottom-up approach,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because synchronous code can’t ever call asynchronous code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Asynchronous-Sequences",
          "level" : 2,
          "text" : "Asynchronous Sequences",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "listPhotos(inGallery:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function in the previous section",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "asynchronously returns the whole array at once,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after all of the array’s elements are ready.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Another approach",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is to wait for one element of the collection at a time",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "asynchronous sequence",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s what iterating over an asynchronous sequence looks like:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import Foundation",
            "",
            "let handle = FileHandle.standardInput",
            "for try await line in handle.bytes.lines {",
            "    print(line)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Instead of using an ordinary ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the example above writes ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : " with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " after it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Like when you call an asynchronous function or method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " indicates a possible suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop potentially suspends execution",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the beginning of each iteration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when it’s waiting for the next element to be available.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the same way that you can use your own types in a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding conformance to the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use your own types in a ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding conformance to the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Calling-Asynchronous-Functions-in-Parallel",
          "level" : 2,
          "text" : "Calling Asynchronous Functions in Parallel",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Calling an asynchronous function with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "runs only one piece of code at a time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "While the asynchronous code is running,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the caller waits for that code to finish",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before moving on to run the next line of code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to fetch the first three photos from a gallery,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you could await three calls to the ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let firstPhoto = await downloadPhoto(named: photoNames[0])",
            "let secondPhoto = await downloadPhoto(named: photoNames[1])",
            "let thirdPhoto = await downloadPhoto(named: photoNames[2])",
            "",
            "let photos = [firstPhoto, secondPhoto, thirdPhoto]",
            "show(photos)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This approach has an important drawback:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although the download is asynchronous",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and lets other work happen while it progresses,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only one call to ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " runs at a time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each photo downloads completely before the next one starts downloading.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, there’s no need for these operations to wait —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each photo can download independently, or even at the same time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To call an asynchronous function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and let it run in parallel with code around it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " in front of ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " when you define a constant,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then write ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " each time you use the constant.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "async let firstPhoto = downloadPhoto(named: photoNames[0])",
            "async let secondPhoto = downloadPhoto(named: photoNames[1])",
            "async let thirdPhoto = downloadPhoto(named: photoNames[2])",
            "",
            "let photos = await [firstPhoto, secondPhoto, thirdPhoto]",
            "show(photos)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "all three calls to ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " start",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without waiting for the previous one to complete.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If there are enough system resources available, they can run at the same time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "None of these function calls are marked with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because the code doesn’t suspend to wait for the function’s result.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead, execution continues",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until the line where ",
              "type" : "text"
            },
            {
              "code" : "photos",
              "type" : "codeVoice"
            },
            {
              "text" : " is defined —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at that point, the program needs the results from these asynchronous calls,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you write ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " to pause execution",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until all three photos finish downloading.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s how you can think about the differences between these two approaches:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Call asynchronous functions with ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "when the code on the following lines depends on that function’s result.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This creates work that is carried out sequentially.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Call asynchronous functions with ",
                      "type" : "text"
                    },
                    {
                      "code" : "async",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "-",
                      "type" : "text"
                    },
                    {
                      "code" : "let",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "when you don’t need the result until later in your code.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "This creates work that can be carried out in parallel.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Both ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and ",
                      "type" : "text"
                    },
                    {
                      "code" : "async",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "-",
                      "type" : "text"
                    },
                    {
                      "code" : "let",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "allow other code to run while they’re suspended.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "In both cases, you mark the possible suspension point with ",
                      "type" : "text"
                    },
                    {
                      "code" : "await",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to indicate that execution will pause, if needed,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "until an asynchronous function has returned.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also mix both of these approaches in the same code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Tasks-and-Task-Groups",
          "level" : 2,
          "text" : "Tasks and Task Groups",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "task",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " is a unit of work",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that can be run asynchronously as part of your program.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "All asynchronous code runs as part of some task.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A task itself does only one thing at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but when you create multiple tasks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift can schedule them to run simultaneously.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " syntax described in the previous section",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "implicitly creates a child task —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this syntax works well when you already know",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "what tasks your program needs to run.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can also create a task group",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(an instance of ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and explicitly add child tasks to that group,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which gives you more control over priority and cancellation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and lets you create a dynamic number of tasks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Tasks are arranged in a hierarchy.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each task in a given task group has the same parent task,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and each task can have child tasks.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because of the explicit relationship between tasks and task groups,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this approach is called ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "structured concurrency",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The explicit parent-child relationships between tasks has several advantages:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "In a parent task,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "you can’t forget to wait for its child tasks to complete.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "When setting a higher priority on a child task,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the parent task’s priority is automatically escalated.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "When a parent task is canceled,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "each of its child tasks is also automatically canceled.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Task-local values propagate to child tasks efficiently and automatically.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s another version of the code to download photos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that handles any number of photos:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "await withTaskGroup(of: Data.self) { group in",
            "    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")",
            "    for name in photoNames {",
            "        group.addTask {",
            "            return await downloadPhoto(named: name)",
            "        }",
            "    }",
            "",
            "    for await photo in group {",
            "        show(photo)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above creates a new task group,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then creates child tasks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to download each photo in the gallery.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift runs as many of these tasks concurrently as conditions allow.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As soon a child task finishes downloading a photo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that photo is displayed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There’s no guarantee about the order that child tasks complete,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the photos from this gallery can be shown in any order.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If the code to download a photo could throw an error,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you would call ",
                  "type" : "text"
                },
                {
                  "code" : "withThrowingTaskGroup(of:returning:body:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " instead.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code listing above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each photo is downloaded and then displayed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the task group doesn’t return any results.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For a task group that returns a result,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you add code that accumulates its result",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inside the closure you pass to ",
              "type" : "text"
            },
            {
              "code" : "withTaskGroup(of:returning:body:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let photos = await withTaskGroup(of: Data.self) { group in",
            "    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")",
            "    for name in photoNames {",
            "        group.addTask {",
            "            return await downloadPhoto(named: name)",
            "        }",
            "    }",
            "",
            "    var results: [Data] = []",
            "    for await photo in group {",
            "        results.append(photo)",
            "    }",
            "",
            "    return results",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like the previous example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this example creates a child task for each photo to download it.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike the previous example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " loop waits for the next child task to finish,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "appends the result of that task to the array of results,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then continues waiting until all child tasks have finished.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Finally,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the task group returns the array of downloaded photos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as its overall result.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Task-Cancellation",
          "level" : 3,
          "text" : "Task Cancellation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift concurrency uses a cooperative cancellation model.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Each task checks whether it has been canceled",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the appropriate points in its execution,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and responds to cancellation appropriately.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Depending on what work the task is doing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "responding to cancellation usually means one of the following:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Throwing an error like ",
                      "type" : "text"
                    },
                    {
                      "code" : "CancellationError",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returning ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " or an empty collection",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Returning the partially completed work",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Downloading pictures could take a long time",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if the pictures are large or the network is slow.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To let the user stop this work,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without waiting for all of the tasks to complete,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the tasks need check for cancellation and stop running if they are canceled.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are two ways a task can do this:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by calling the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " type method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or by reading the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.type.property",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " type property.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Calling ",
              "type" : "text"
            },
            {
              "code" : "checkCancellation()",
              "type" : "codeVoice"
            },
            {
              "text" : " throws an error if the task is canceled;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a throwing task can propagate the error out of the task,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "stopping all of the task’s work.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This has the advantage of being simple to implement and understand.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more flexibility, use the ",
              "type" : "text"
            },
            {
              "code" : "isCancelled",
              "type" : "codeVoice"
            },
            {
              "text" : " property,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which lets you perform clean-up work as part of stopping the task,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like closing network connections and deleting temporary files.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let photos = await withTaskGroup(of: Optional<Data>.self) { group in",
            "    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")",
            "    for name in photoNames {",
            "        let added = group.addTaskUnlessCancelled {",
            "            guard !Task.isCancelled else { return nil }",
            "            return await downloadPhoto(named: name)",
            "        }",
            "        guard added else { break }",
            "    }",
            "",
            "    var results: [Data] = []",
            "    for await photo in group {",
            "        if let photo { results.append(photo) }",
            "    }",
            "    return results",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above makes several changes from the previous version:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Each task is added using the",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)",
                      "isActive" : true,
                      "type" : "reference"
                    },
                    {
                      "text" : " method,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to avoid starting new work after cancellation.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "After each call to ",
                      "type" : "text"
                    },
                    {
                      "code" : "addTaskUnlessCancelled(priority:operation:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the code confirms that the new child task was added.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If the group is canceled, the value of ",
                      "type" : "text"
                    },
                    {
                      "code" : "added",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is ",
                      "type" : "text"
                    },
                    {
                      "code" : "false",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " —",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "in that case, the code stops trying to download additional photos.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Each task checks for cancellation",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "before starting to download the photo.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "If it has been canceled, the task returns ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "At the end,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the task group skips ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " values when collecting the results.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Handling cancellation by returning ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "means the task group can return a partial result —",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "the photos that were already downloaded at the time of cancellation —",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "instead of discarding that completed work.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "To check whether a task has been canceled from outside that task,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "use the ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.property",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " instance property",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "instead of the type property.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "For work that needs immediate notification of cancellation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:isolation:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let task = await Task.withTaskCancellationHandler {",
            "    \/\/ ...",
            "} onCancel: {",
            "    print(\"Canceled!\")",
            "}",
            "",
            "\/\/ ... some time later...",
            "task.cancel()  \/\/ Prints \"Canceled!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When using a cancellation handler,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "task cancellation is still cooperative:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The task either runs to completion",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or checks for cancellation and stops early.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the task is still running when the cancellation handler starts,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "avoid sharing state between the task and its cancellation handler,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which could create a race condition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Unstructured-Concurrency",
          "level" : 3,
          "text" : "Unstructured Concurrency",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to the structured approaches to concurrency",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "described in the previous sections,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift also supports unstructured concurrency.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike tasks that are part of a task group,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "unstructured task",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " doesn’t have a parent task.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You have complete flexibility to manage unstructured tasks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in whatever way your program needs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but you’re also completely responsible for their correctness.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To create an unstructured task that runs on the current actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "call the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-7f0zv",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " initializer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To create an unstructured task that’s not part of the current actor,",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "known more specifically as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "detached task",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "call the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/detached(priority:operation:)-d24l",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " class method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both of these operations return a task that you can interact with —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, to wait for its result or to cancel it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let newPhoto = \/\/ ... some photo data ...",
            "let handle = Task {",
            "    return await add(newPhoto, toGalleryNamed: \"Spring Adventures\")",
            "}",
            "let result = await handle.value"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about managing detached tasks,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "The-Main-Actor",
          "level" : 2,
          "text" : "The Main Actor",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The previous sections discuss approaches for dividing up concurrent work.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In some cases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after divided-up work finishes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you also need to join execution back together",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to do some synchronous work model.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when an app updates its user interface,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "changes need to be performed one at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with each update completing before the next one begins,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to prevent data races.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "UI updates can also come from many places in your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so grouping all UI-related code on a single type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t work very well.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To serialize concurrent work like this,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "main actor",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is a shared instance of ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/mainactor",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Before you start using concurrency in your code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "everything runs on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "As you identify long-running or resource-intensive code,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can move this work off the main actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a way that’s still safe and correct.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The main actor is closely related to the main thread,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "but they’re not the same thing.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The main actor has private mutable state,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and the main thread serializes access to that state.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "When you run code on the main actor,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift executes that code on the main thread.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because of this connection,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you might see these two terms used interchangeably.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Your code interacts with the main actor;",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the main thread is a lower-level implementation detail.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are several ways to run work on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To ensure a function always runs on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mark it with the ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@MainActor",
            "func show(_: Data) {",
            "    \/\/ ... UI code to display the photo ...",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute on the ",
              "type" : "text"
            },
            {
              "code" : "show(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "requires this function to run only on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Within other code that’s running on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can call ",
              "type" : "text"
            },
            {
              "code" : "show(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " as a synchronous function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to call ",
              "type" : "text"
            },
            {
              "code" : "show(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " from code that isn’t running on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you have to include ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " and call it as an asynchronous function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because switching to the main actor introduces a potential suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func downloadAndShowPhoto(named name: String) async {",
            "    let photo = await downloadPhoto(named: name)",
            "    await show(photo)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "both the ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "show(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " functions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "might suspend when you call them.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This code also shows a common pattern:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Perform long-running and CPU-intensive work in the background,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and then switch to the main actor to update the UI.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the ",
              "type" : "text"
            },
            {
              "code" : "downloadAndShowPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function isn’t on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the work in ",
              "type" : "text"
            },
            {
              "code" : "downloadPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " also doesn’t run on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Only the work in ",
              "type" : "text"
            },
            {
              "code" : "show(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " to update the UI runs on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because that function is marked with the ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To ensure that a closure runs on the main actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you write ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " before the capture list and before ",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "at the start of the closure.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let photo = await downloadPhoto(named: \"Trees at Sunrise\")",
            "Task { @MainActor in",
            "    show(photo)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above is similar to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "downloadAndShowPhoto(named:)",
              "type" : "codeVoice"
            },
            {
              "text" : " from the previous code listing,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but the code in this example doesn’t wait for the UI update.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also write ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " on a structure, class, or enumeration",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to ensure all of its methods and all access to its properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to run on the main actor:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@MainActor",
            "struct PhotoGallery {",
            "    var photoNames: [String]",
            "    func drawUI() { \/* ... other UI code ... *\/ }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "PhotoGallery",
              "type" : "codeVoice"
            },
            {
              "text" : " structure in the code above",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "draws the photos on screen,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the names from its ",
              "type" : "text"
            },
            {
              "code" : "photoNames",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to determine which photos to display.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "photoNames",
              "type" : "codeVoice"
            },
            {
              "text" : " effects the UI,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code that changes it needs to run on the main actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to serialize that access.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you’re building on top of a framework,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that framework’s protocols and base classes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are typically already marked ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you don’t usually write ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " on your own types in that case.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a simplified example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@MainActor",
            "protocol View { \/* ... *\/ }",
            "",
            "\/\/ Implicitly @MainActor",
            "struct PhotoGalleryView: View { \/* ... *\/ }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a framework like SwiftUI defines the ",
              "type" : "text"
            },
            {
              "code" : "View",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By writing ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " on the protocol declaration,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "types like ",
              "type" : "text"
            },
            {
              "code" : "PhotoGalleryView",
              "type" : "codeVoice"
            },
            {
              "text" : " that conform to the protocol",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are also implicitly marked ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You’d see the same behavior if ",
              "type" : "text"
            },
            {
              "code" : "View",
              "type" : "codeVoice"
            },
            {
              "text" : " were a base class",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and ",
              "type" : "text"
            },
            {
              "code" : "PhotoGalleryView",
              "type" : "codeVoice"
            },
            {
              "text" : " were a subclass —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the subclass would be implicitly marked ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the examples above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "PhotoGallery",
              "type" : "codeVoice"
            },
            {
              "text" : " protects the entire structure on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For more fine-grained control,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can write ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : " on just the properties or methods",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that need to be accessed or run on the main thread:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct PhotoGallery {",
            "    @MainActor var photoNames: [String]",
            "    var hasCachedPhotos = false",
            "",
            "    @MainActor func drawUI() { \/* ... UI code ... *\/ }",
            "    func cachePhotos() { \/* ... networking code ... *\/ }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the version of ",
              "type" : "text"
            },
            {
              "code" : "PhotoGallery",
              "type" : "codeVoice"
            },
            {
              "text" : " above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "drawUI()",
              "type" : "codeVoice"
            },
            {
              "text" : " method draws the gallery’s pictures on screen,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it needs to be isolated to the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "photoNames",
              "type" : "codeVoice"
            },
            {
              "text" : " property doesn’t directly create the UI,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it does store state that the ",
              "type" : "text"
            },
            {
              "code" : "drawUI()",
              "type" : "codeVoice"
            },
            {
              "text" : " function uses to draw the UI,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so this property also needs to be accessed only on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "changes to the ",
              "type" : "text"
            },
            {
              "code" : "hasCachedPhotos",
              "type" : "codeVoice"
            },
            {
              "text" : " property",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "don’t interact with the UI,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the ",
              "type" : "text"
            },
            {
              "code" : "cachePhotos()",
              "type" : "codeVoice"
            },
            {
              "text" : " method doesn’t access any state",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that requires running it on the main actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "So these aren’t marked with ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As with the earlier examples,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you’re using a framework to build your UI,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the property wrappers from that framework",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "probably already mark your UI state properties as ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When defining a property wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if its ",
              "type" : "text"
            },
            {
              "code" : "wrappedValue",
              "type" : "codeVoice"
            },
            {
              "text" : " property is marked ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then any property you apply that property wrapper to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is also implicitly marked ",
              "type" : "text"
            },
            {
              "code" : "@MainActor",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Actors",
          "level" : 2,
          "text" : "Actors",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift provides the main actor for you —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can also define your own actors.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Actors let you safely share information between concurrent code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like classes, actors are reference types,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so the comparison of value types and reference types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "applies to actors as well as classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike classes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "actors allow only one task to access their mutable state at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which makes it safe for code in multiple tasks",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to interact with the same instance of an actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, here’s an actor that records temperatures:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "actor TemperatureLogger {",
            "    let label: String",
            "    var measurements: [Int]",
            "    private(set) var max: Int",
            "",
            "    init(label: String, measurement: Int) {",
            "        self.label = label",
            "        self.measurements = [measurement]",
            "        self.max = measurement",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You introduce an actor with the ",
              "type" : "text"
            },
            {
              "code" : "actor",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "followed by its definition in a pair of braces.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "TemperatureLogger",
              "type" : "codeVoice"
            },
            {
              "text" : " actor has properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that other code outside the actor can access,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and restricts the ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : " property so only code inside the actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can update the maximum value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You create an instance of an actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the same initializer syntax as structures and classes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you access a property or method of an actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you use ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " to mark the potential suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let logger = TemperatureLogger(label: \"Outdoors\", measurement: 25)",
            "print(await logger.max)",
            "\/\/ Prints \"25\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "accessing ",
              "type" : "text"
            },
            {
              "code" : "logger.max",
              "type" : "codeVoice"
            },
            {
              "text" : " is a possible suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because the actor allows only one task at a time to access its mutable state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if code from another task is already interacting with the logger,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this code suspends while it waits to access the property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code that’s part of the actor doesn’t write ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when accessing the actor’s properties.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "here’s a method that updates a ",
              "type" : "text"
            },
            {
              "code" : "TemperatureLogger",
              "type" : "codeVoice"
            },
            {
              "text" : " with a new temperature:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension TemperatureLogger {",
            "    func update(with measurement: Int) {",
            "        measurements.append(measurement)",
            "        if measurement > max {",
            "            max = measurement",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "update(with:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method is already running on the actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it doesn’t mark its access to properties like ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : " with ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This method also shows one of the reasons",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "why actors allow only one task at a time to interact with their mutable state:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some updates to an actor’s state temporarily break invariants.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "TemperatureLogger",
              "type" : "codeVoice"
            },
            {
              "text" : " actor keeps track of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a list of temperatures and a maximum temperature,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and it updates the maximum temperature when you record a new measurement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the middle of an update,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after appending the new measurement but before updating ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the temperature logger is in a temporary inconsistent state.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Preventing multiple tasks from interacting with the same instance simultaneously",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "prevents problems like the following sequence of events:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Your code calls the ",
                      "type" : "text"
                    },
                    {
                      "code" : "update(with:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "It updates the ",
                      "type" : "text"
                    },
                    {
                      "code" : "measurements",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " array first.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Before your code can update ",
                      "type" : "text"
                    },
                    {
                      "code" : "max",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "code elsewhere reads the maximum value and the array of temperatures.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Your code finishes its update by changing ",
                      "type" : "text"
                    },
                    {
                      "code" : "max",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code running elsewhere would read incorrect information",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because its access to the actor was interleaved",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the middle of the call to ",
              "type" : "text"
            },
            {
              "code" : "update(with:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while the data was temporarily invalid.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You can prevent this problem when using Swift actors",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because they only allow one operation on their state at a time,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and because that code can be interrupted",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only in places where ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " marks a suspension point.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "update(with:)",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t contain any suspension points,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no other code can access the data in the middle of an update.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If code outside the actor tries to access those properties directly,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like accessing a structure or class’s properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you’ll get a compile-time error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(logger.max)  \/\/ Error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Accessing ",
              "type" : "text"
            },
            {
              "code" : "logger.max",
              "type" : "codeVoice"
            },
            {
              "text" : " without writing ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " fails because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the properties of an actor are part of that actor’s isolated local state.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The code to access this property needs to run as part of the actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which is an asynchronous operation and requires writing ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift guarantees that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "only code running on an actor can access that actor’s local state.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This guarantee is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "actor isolation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following aspects of the Swift concurrency model",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "work together to make it easier to reason about shared mutable state:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Code in between possible suspension points runs sequentially,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "without the possibility of interruption from other concurrent code.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "However,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "multiple pieces of concurrent code can run at the same time,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "so other code could be running simultaneously.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Code that interacts with an actor’s local state",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "runs only on that actor.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "An actor runs only one piece of code at a time.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because of these guarantees,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code that doesn’t include ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " and that’s inside an actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can make the updates without a risk of other places in your program",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "observing the temporarily invalid state.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the code below converts measured temperatures from Fahrenheit to Celsius:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension TemperatureLogger {",
            "    func convertFahrenheitToCelsius() {",
            "        for i in measurements.indices {",
            "            measurements[i] = (measurements[i] - 32) * 5 \/ 9",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The code above converts the array of measurements, one at a time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "While the map operation is in progress,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "some temperatures are in Fahrenheit and others are in Celsius.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, because none of the code includes ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there are no potential suspension points in this method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The state that this method modifies belongs to the actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which protects it against code reading or modifying it",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "except when that code runs on the actor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means there’s no way for other code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to read a list of partially converted temperatures",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while unit conversion is in progress.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to writing code in an actor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that protects temporary invalid state by omitting potential suspension points,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can move that code into a synchronous method.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "convertFahrenheitToCelsius()",
              "type" : "codeVoice"
            },
            {
              "text" : " method above is a synchronous method,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it’s guaranteed to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "never",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " contain potential suspension points.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This function encapsulates the code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that temporarily makes the data model inconsistent,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and makes it easier for anyone reading the code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to recognize that no other code can run",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before data consistency is restored by completing the work.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It’s important that Swift doesn’t switch from this code",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to run code from another part of the program",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "during that period of time.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the future,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if you try to add concurrent code to this function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "introducing a possible suspension point,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you’ll get compile-time error instead of introducing a bug.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Sendable-Types",
          "level" : 2,
          "text" : "Sendable Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Tasks and actors let you divide a program",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "into pieces that can safely run concurrently.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside of a task or an instance of an actor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the part of a program that contains mutable state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like variables and properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is called a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "concurrency domain",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some kinds of data can’t be shared between concurrency domains,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because that data contains mutable state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it doesn’t protect against overlapping access.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A type that can be shared from one concurrency domain to another",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is known as a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "sendable",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " type.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, it can be passed as an argument when calling an actor method",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or be returned as the result of a task.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The examples earlier in this chapter didn’t discuss sendability",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because those examples use simple value types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that are always safe to share",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the data being passed between concurrency domains.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In contrast,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "some types aren’t safe to pass across concurrency domains.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, a class that contains mutable properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and doesn’t serialize access to those properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can produce unpredictable and incorrect results",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when you pass instances of that class between different tasks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You mark a type as being sendable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by declaring conformance to the ",
              "type" : "text"
            },
            {
              "code" : "Sendable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That protocol doesn’t have any code requirements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but it does have semantic requirements that Swift enforces.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In general, there are three ways for a type to be sendable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The type is a value type,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and its mutable state is made up of other sendable data —",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "for example, a structure with stored properties that are sendable",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "or an enumeration with associated values that are sendable.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The type doesn’t have any mutable state,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and its immutable state is made up of other sendable data —",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "for example, a structure or class that has only read-only properties.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The type has code that ensures the safety of its mutable state,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like a class that’s marked ",
                      "type" : "text"
                    },
                    {
                      "code" : "@MainActor",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "or a class that serializes access to its properties",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "on a particular thread or queue.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For a detailed list of the semantic requirements,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol reference.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some types are always sendable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "like structures that have only sendable properties",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and enumerations that have only sendable associated values.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct TemperatureReading: Sendable {",
            "    var measurement: Int",
            "}",
            "",
            "extension TemperatureLogger {",
            "    func addReading(from reading: TemperatureReading) {",
            "        measurements.append(reading.measurement)",
            "    }",
            "}",
            "",
            "let logger = TemperatureLogger(label: \"Tea kettle\", measurement: 85)",
            "let reading = TemperatureReading(measurement: 45)",
            "await logger.addReading(from: reading)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "TemperatureReading",
              "type" : "codeVoice"
            },
            {
              "text" : " is a structure that has only sendable properties,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the structure isn’t marked ",
              "type" : "text"
            },
            {
              "code" : "public",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "@usableFromInline",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it’s implicitly sendable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s a version of the structure",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where conformance to the ",
              "type" : "text"
            },
            {
              "code" : "Sendable",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol is implied:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct TemperatureReading {",
            "    var measurement: Int",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To explicitly mark a type as not being sendable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write ",
              "type" : "text"
            },
            {
              "code" : "~Sendable",
              "type" : "codeVoice"
            },
            {
              "text" : " after the type:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct FileDescriptor: ~Sendable {",
            "    let rawValue: Int",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "suppressing an implicit conformance to a protocol,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Implicit-Conformance-to-a-Protocol",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language (6.1)",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Classes-Are-Reference-Types": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types",
  "kind" : "section",
  "title" : "Classes Are Reference Types",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/classesandstructures#Classes-Are-Reference-Types"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Unstructured-Concurrency": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency",
  "kind" : "section",
  "title" : "Unstructured Concurrency",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/concurrency#Unstructured-Concurrency"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Implicit-Conformance-to-a-Protocol": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Implicit-Conformance-to-a-Protocol",
  "kind" : "section",
  "title" : "Implicit Conformance to a Protocol",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/protocols#Implicit-Conformance-to-a-Protocol"
},
"https://developer.apple.com/documentation/swift/asyncsequence": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence",
  "title" : "AsyncSequence",
  "titleInlineContent" : [
    {
      "code" : "AsyncSequence",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence"
},
"https://developer.apple.com/documentation/swift/mainactor": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/mainactor",
  "title" : "MainActor",
  "titleInlineContent" : [
    {
      "code" : "MainActor",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/mainactor"
},
"https://developer.apple.com/documentation/swift/sendable": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable",
  "title" : "Sendable",
  "titleInlineContent" : [
    {
      "code" : "Sendable",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sendable"
},
"https://developer.apple.com/documentation/swift/sequence": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence",
  "title" : "Sequence",
  "titleInlineContent" : [
    {
      "code" : "Sequence",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/sequence"
},
"https://developer.apple.com/documentation/swift/task": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task",
  "title" : "Task",
  "titleInlineContent" : [
    {
      "code" : "Task",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task"
},
"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation",
  "title" : "Task.checkCancellation()",
  "titleInlineContent" : [
    {
      "code" : "Task.checkCancellation()",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"
},
"https://developer.apple.com/documentation/swift/task/3814840-yield": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield",
  "title" : "Task.yield()",
  "titleInlineContent" : [
    {
      "code" : "Task.yield()",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield"
},
"https://developer.apple.com/documentation/swift/task/detached(priority:operation:)-d24l": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/detached(priority:operation:)-d24l",
  "title" : "Task.detached(priority:operation:)",
  "titleInlineContent" : [
    {
      "code" : "Task.detached(priority:operation:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/detached(priority:operation:)-d24l"
},
"https://developer.apple.com/documentation/swift/task/init(priority:operation:)-7f0zv": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-7f0zv",
  "title" : "Task.init(priority:operation:)",
  "titleInlineContent" : [
    {
      "code" : "Task.init(priority:operation:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-7f0zv"
},
"https://developer.apple.com/documentation/swift/task/iscancelled-swift.property": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.property",
  "title" : "Task.isCancelled",
  "titleInlineContent" : [
    {
      "code" : "Task.isCancelled",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.property"
},
"https://developer.apple.com/documentation/swift/task/iscancelled-swift.type.property": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.type.property",
  "title" : "Task.isCancelled",
  "titleInlineContent" : [
    {
      "code" : "Task.isCancelled",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/iscancelled-swift.type.property"
},
"https://developer.apple.com/documentation/swift/task/sleep(for:tolerance:clock:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)",
  "title" : "Task.sleep(for:tolerance:clock:)",
  "titleInlineContent" : [
    {
      "code" : "Task.sleep(for:tolerance:clock:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)"
},
"https://developer.apple.com/documentation/swift/taskgroup": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup",
  "title" : "TaskGroup",
  "titleInlineContent" : [
    {
      "code" : "TaskGroup",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"
},
"https://developer.apple.com/documentation/swift/taskgroup/addtaskunlesscancelled(priority:operation:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)",
  "title" : "TaskGroup.addTaskUnlessCancelled(priority:operation:)",
  "titleInlineContent" : [
    {
      "code" : "TaskGroup.addTaskUnlessCancelled(priority:operation:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)"
},
"https://developer.apple.com/documentation/swift/withtaskcancellationhandler(operation:oncancel:isolation:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:isolation:)",
  "title" : "Task.withTaskCancellationHandler(operation:onCancel:isolation:)",
  "titleInlineContent" : [
    {
      "code" : "Task.withTaskCancellationHandler(operation:onCancel:isolation:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:isolation:)"
}
}
}